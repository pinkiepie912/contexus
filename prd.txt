### ## 1. Contexus 확장 프로그램: 기획 요약 📝

- **서비스 목표:** 사용자가 ChatGPT, Gemini, Claude 등 주요 LLM 서비스에서 나눈 중요한 대화를 브라우저 내에 영구적으로 저장하고, 이를 지식 자산으로 활용하여 생산성을 극대화하는 것을 돕습니다.
- **핵심 기능 (MVP):**
    1. **컨텍스트 캡처:** 여러 LLM 사이트에서 텍스트 선택만으로 손쉽게 대화 스니펫 저장.
    2. **로컬 저장소:** 모든 데이터를 사용자의 브라우저(IndexedDB)에 안전하게 보관.
    3. **라이브러리 & 검색:** Side Panel UI를 통해 저장된 스니펫을 키워드로 빠르게 검색 및 관리.
    4. **역할 적용:** 저장된 스니펫에 특정 역할을 적용하여 완성된 프롬프트를 클립보드에 복사.

---

### ## 2. 개발 컨벤션 및 규칙 📐

- **Git 브랜치 전략:** **GitHub Flow** (`main` + `feature` 브랜치)를 따릅니다.
- **커밋 메시지:** **Conventional Commits** 양식을 준수합니다.
- **코딩 스타일:** **ESLint**와 **Prettier**를 통해 코드 스타일을 일관되게 유지합니다.
- **UI 개발:** **`shadcn/ui`*를 기본 UI 라이브러리로 사용하며, `components/ui` (shadcn)와 `components/custom` (조합)으로 분리 관리합니다.
- 코드에는 Flow와 동작, 사용방법을 설명하는 주석이 포함되어야 합니다.

---

### ## 3. Phase 1: MVP 개발 로드맵 (기능 단위) 🚀

### **Feature 1: 데이터베이스 및 타입 정의 (Data Foundation)**

- **### Task 1.1: TypeScript 타입 정의**
    - **ACTION:** `src/types.ts` 파일을 생성하고, `Snippet`과 `Role` 데이터 구조를 정의합니다.
- **### Task 1.2: Dexie.js 데이터베이스 스키마 구현**
    - **ACTION:** `src/lib/db.ts` 파일을 생성하고, `Dexie.js`를 사용하여 IndexedDB 스키마를 설정합니다.

### **Feature 2: 백그라운드 서비스 로직 (Core Brain)**

- **### Task 2.1: 백그라운드 서비스 워커 설정 및 시딩**
    - **ACTION:** `src/background/index.ts` 파일을 생성합니다. `chrome.runtime.onInstalled` 이벤트 발생 시 기본 `Role` 데이터를 DB에 시딩하는 로직을 구현합니다.
    - **MCP 서버**: context7 MCP를 사용합니다.
- **### Task 2.2: 스니펫 저장 API 구현**
    - **ACTION:** `src/background/index.ts`에 `SAVE_SNIPPET` 타입의 메시지를 수신하여 IndexedDB에 스니펫을 저장하는 리스너를 추가합니다.
    - **MCP 서버**: context7 MCP를 사용합니다.
- **### Task 2.3: 데이터 조회 API 구현**
    - **ACTION:** `src/background/index.ts`에 `SEARCH_SNIPPETS`, `GET_ALL_ROLES` 등 Side Panel UI에서 필요한 데이터를 조회하는 메시지 리스너를 추가합니다.
    - **MCP 서버**: context7 MCP를 사용합니다.

### **Feature 3: 컨텐츠 스크립트 설정 (Web Sensor)**

- **### Task 3.1: 사이트 어댑터 설정**
    - **ACTION:** `src/adapters.ts` 파일을 생성하여 여러 LLM 사이트의 CSS 선택자 정보를 정의합니다.
    - **MCP 서버**: context7, playwright MCP를 사용합니다.
- **### Task 3.2: 캡처 로직 및 UI 렌더링 준비**
    - **ACTION:** `src/content/index.ts` 파일을 생성합니다. `MutationObserver`를 사용하여 대화창을 감지하는 로직의 뼈대를 작성합니다.
    - **MCP 서버**: context7, playwright MCP를 사용합니다.

### **Feature 4: 캡처 UI 및 이벤트 연결 (Capture Interaction)**

- **### Task 4.1: 캡처 버튼 컴포넌트 개발**
    - **ACTION:** `src/content/CaptureButton.tsx` 파일을 생성하고, `shadcn/ui`의 `Button`을 사용하여 플로팅 캡처 버튼 UI를 개발합니다.
    - **MCP 서버**: context7, shardcn MCP를 사용합니다.
- **### Task 4.2: Shadow DOM 내 캡처 버튼 렌더링**
    - **ACTION:** `src/content/index.ts`에서 `MutationObserver`로 감지한 메시지 버블 옆에 Shadow DOM을 생성하고, 그 안에 `CaptureButton` React 컴포넌트를 렌더링하는 로직을 구현합니다.
    - **MCP 서버**: context7, shardcn MCP를 사용합니다.
- **### Task 4.3: 캡처 버튼 이벤트 연결**
    - **ACTION:** `CaptureButton` 클릭 시, 선택된 텍스트와 현재 URL을 `chrome.runtime.sendMessage`를 통해 백그라운드 스크립트로 전송하는 로직을 구현합니다.

### **Feature 5: Side Panel UI 개발 (Main Interface)**

- **### Task 5.1: Side Panel 레이아웃 및 목록 표시**
    - **ACTION:** `src/sidepanel/App.tsx` 파일에 `Input`, `ScrollArea`, `Card` 등을 사용하여 레이아웃을 구성하고, 백그라운드에서 스니펫 목록을 가져와 렌더링합니다.
    - **MCP 서버**: context7, shardcn MCP를 사용합니다.
- **### Task 5.2: 실시간 검색 기능 구현**
    - **ACTION:** 검색 `Input`에 `onChange` 이벤트를 연결하고, 디바운스를 적용하여 백그라운드에 검색을 요청한 후 결과를 실시간으로 업데이트합니다.
- **### Task 5.3: 역할 적용 및 프롬프트 생성/복사**
    - **ACTION:** 스니펫 상세 뷰에서 `Select` 컴포넌트로 역할 목록을 표시하고, 역할 선택 시 최종 프롬프트를 생성하여 클립보드에 복사하는 기능을 구현합니다.
    - **MCP 서버**: context7, shardcn MCP를 사용합니다.
- **### Task 5.4: 사용자 피드백 구현**
    - **ACTION:** 프롬프트 복사 성공 시, `shadcn/ui`의 `Toast`를 사용하여 사용자에게 시각적인 피드백을 제공합니다.
    - **MCP 서버**: context7, shardcn MCP를 사용합니다.

---

### ## 4. `shadcn/ui` 활용 가이드 🎨

- **컴포넌트 추가:** 개발 중 필요한 컴포넌트는 shardcn mcp 서버를 활용하여 작성합니다. 필요하다면 크롬익스텐션에서 사용할 수 있도록 수정합니다.
- **스타일링:**
    - `Side Panel`, `Popup` 등 독립적인 UI의 React 진입점(`main.tsx`) 최상단에는 항상 `import '@/globals.css';`를 포함시켜야 합니다.
    - **Content Script**를 통해 페이지에 직접 UI를 삽입할 때는 **Shadow DOM**을 사용하여 페이지의 기존 CSS와 충돌하지 않도록 스타일을 완벽하게 격리합니다.
- **다크 모드:**
    - 시스템 테마(`prefers-color-scheme`)에 동기화되는 `useTheme` 훅을 구현하여 사용합니다.
    - 이 훅을 각 UI의 최상위 컴포넌트(`App.tsx` 등)에서 호출하여 `<html>` 태그에 `dark` 클래스를 적용합니다.
